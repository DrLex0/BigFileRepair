#!/bin/bash
# Big file repair tool 1.0 by Alexander Thomas.
#
# Requires `md5sum` and GNU style `dd` commands.
# (TODO: auto-detect BSD style dd and switch to `md5` if available.)
#
# BSD 2-Clause License
#
# Copyright (c) 2021, Alexander Thomas
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

VERSION='1.0'
PROG_NAME=$(basename "$0")

function usage()
{
	cat <<__END__
Semi-offline big file repair tool v${VERSION}.
For when a huge file has small errors and it is too expensive to pull the
whole file across a limited bandwidth link again.

Usage:
1. Run on the damaged file:
   ${PROG_NAME} <big_file>
   This will produce a 'checksums.txt'. Copy it to where the original file is.
2. Then run at the original location:
   ${PROG_NAME} -c <original_file>
   This will extract blocks to be repaired to files named BLOCK_x.
   It will also print a command to be executed at the other side.
3. Copy over the BLOCK_x files to where the damaged file is.
   Then run the command given in the previous step to repair the file.

Advanced:
  -s FILE: use checksums file name different from the default 'checksums.txt'.
  -b MIB: use a different chunk size (MiB) (default is 100 MiB).
  -i x1,[x2..]: inject chunk file(s) BLOCK_x1 etc. at their positions.
  -t BYTES: truncate the file to a size of BYTES.
__END__
}

# Size of blocks in MiB in which we will split up the big file.
# Do all dd operations with bs=1M.
CHUNK_MiB=100
SUMS_FILE='checksums.txt'
verify=''

while getopts ":hcs:x:i:t:b:" o; do
	case "$o" in
	h)
		usage
		exit ;;
	c)
		verify=1 ;;
	s)
		SUMS_FILE=$OPTARG ;;
	i)
		IBLOCKS=$OPTARG ;;
	t)
		TRUNC_BYTES=$OPTARG ;;
	b)
		CHUNK_MiB=$OPTARG ;;
	*)
		usage
		exit 2
		;;
	esac
done
shift $((OPTIND-1))

BIGFILE=$1


function pos_int
{
	if [[ $1 =~ ^[0-9]+$ ]]; then
		return 0
	fi
	return 1
}

function strict_pos_int
{
	if [[ $1 =~ ^[0-9]+$ ]] && [ $1 -gt 0 ]; then
		return 0
	fi
	return 1
}

if [ -z "${BIGFILE}" ]; then
	echo "ERROR: missing file argument. Run with -h for usage." 1>&2
	exit 2
fi
if [ -n "${verify}" ] && [ -n "${IBLOCKS}${TRUNC_BYTES}" ]; then
	echo "ERROR: the -c argument cannot be used together with -i or -t." 1>&2
	exit 2
fi
if ! strict_pos_int "${CHUNK_MiB}"; then
	echo "ERROR: value following -b must be a strict positive integer." 1>&2
	exit 2
fi
if [ -n "${TRUNC_BYTES}" ] && ! strict_pos_int "${TRUNC_BYTES}"; then
	echo "ERROR: value following -t must be a strict positive integer." 1>&2
	exit 2
fi


if [ ! -f "${BIGFILE}" -o ! -r "${BIGFILE}" ]; then
	echo "ERROR: no such file or not readable: ${BIGFILE}" 1>&2
	exit 2
fi

total_size=$(stat -c '%s' "${BIGFILE}")


function join_array
{
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

function get_chunk_size
{
	local line=$(head -n 1 "$1")

	if ! [[ $line =~ ^CHUNK_MiB\ [0-9]+$ ]]; then
		echo "ERROR: not a valid checksums file: $1" 1>&2
		exit 1
	fi
	awk '{print $2}' <<<"${line}"
}

function get_total_size
{
	local line=$(head -n 2 "$1" | tail -n 1)

	if ! [[ $line =~ ^TOTAL\ [0-9]+$ ]]; then
		echo "ERROR: not a valid checksums file: $1" 1>&2
		exit 1
	fi
	awk '{print $2}' <<<"${line}"
}

function checksum_damaged
{
	local this_chunk
	local remaining=$total_size
	local chunk_bytes=$(( $CHUNK_MiB * 1048576 ))
	local seek=0  # Count in MiB

	echo "CHUNK_MiB ${CHUNK_MiB}" | tee $SUMS_FILE
	echo "TOTAL ${total_size}" | tee -a $SUMS_FILE
	echo "SUM md5sum" | tee -a $SUMS_FILE  # in case we ever want to offer a choice between checksums

	while [ $remaining -gt 0 ]; do
		this_chunk=$chunk_bytes
		if [ "${remaining}" -lt "${chunk_bytes}" ]; then
			this_chunk=$remaining
		fi
		md5=$(dd if="${BIGFILE}" bs=1M count=$CHUNK_MiB skip=$seek status=none | md5sum | awk '{print $1}')
		echo "${md5} ${seek}" | tee -a $SUMS_FILE
		seek=$(( $seek + $CHUNK_MiB ))
		remaining=$(( $remaining - $this_chunk ))
	done
}

function compare_with_original
{
	if [ ! -f $SUMS_FILE -o ! -r $SUMS_FILE ]; then
		echo "ERROR: no such file or not readable: '${SUMS_FILE}'" 1>&2
		exit 3
	fi
	local dmg_chunk_s=$(get_chunk_size $SUMS_FILE)
	local dmg_size=$(get_total_size $SUMS_FILE)
	local dmg_sums

	if [ "${dmg_chunk_s}" != "${CHUNK_MiB}" ]; then
		echo "ERROR: chunk size must be identical for original and damaged files." 1>&2
		echo "       Try again with argument: -b ${dmg_chunk_s}" 1>&2
		exit 1
	fi
	# This can be done more elegantly with bash 4 functionality but I want to keep this
	# somewhat compatible with more antique environments.
	IFS=$'\n' read -d '' -r -a dmg_sums < $SUMS_FILE
	dmg_sums=("${dmg_sums[@]:3}")

	echo 'Comparing...'
	local this_chunk
	local remaining=$total_size
	local chunk_bytes=$(( $CHUNK_MiB * 1048576 ))
	local seek=0  # Count in MiB
	local idx=0
	local broken=()
	local anything_good
	while [ $remaining -gt 0 ]; do
		this_chunk=$chunk_bytes
		if [ "${remaining}" -lt "${chunk_bytes}" ]; then
			this_chunk=$remaining
		fi
		md5=$(dd if="${BIGFILE}" bs=1M count=$CHUNK_MiB skip=$seek status=none | md5sum | awk '{print $1}')
		dmg_md5=$(awk '{print $1}' <<<"${dmg_sums[$idx]}")
		[ -n "$DEBUG" ] && echo "${idx} ${seek}: ORIG ${md5}, DMG ${dmg_md5}"
		if [ "${md5}" != "${dmg_md5}" ]; then
			[ -n "$DEBUG" ] && echo "Bad: ${seek}"
			broken+=($seek)
			dd if="${BIGFILE}" of="BLOCK_${seek}" bs=1M count=$CHUNK_MiB skip=$seek status=none
		else
			anything_good=1
		fi
		idx=$(( $idx + 1 ))
		seek=$(( $seek + $CHUNK_MiB ))
		remaining=$(( $remaining - $this_chunk ))
	done

	if [ -z "${anything_good}" ]; then
		echo 'Unfortunately the whole file is messed up, you will have to copy it entirely.'
		exit
	fi
	if [ -n "${broken}" ] || [ "${total_size}" -lt "${dmg_size}" ]; then
		echo "Differences found. Copy over all BLOCK_* files to where the damaged file is,"
		echo "  and then run (with the correct file name):"
		local trunc_arg=''
		[ "${total_size}" -lt "${dmg_size}" ] && trunc_arg="-t ${total_size} "
		local block_arg=$(join_array , "${broken[@]}")
		echo "${PROG_NAME} -b ${CHUNK_MiB} ${trunc_arg}-i ${block_arg} <damaged_file>"
	else
		echo "No differences found."
	fi
}

function inject_blocks
{
	local positions=()
	local position

	IFS=',' read -r -a positions <<< "${IBLOCKS}"
	for position in "${positions[@]}"; do
		if ! pos_int "${position}"; then
			echo "ERROR: argument following -i must be positive integers separated by commas." 1>&2
			exit 2
		fi
		if [ ! -f "BLOCK_${position}" ]; then
			echo "ERROR: file 'BLOCK_${position}' not found." 1>&2
			exit 3
		fi
		# 'seek' to jump to output position, conv=notrunc to avoid truncating
		dd if="BLOCK_${position}" of="${BIGFILE}" bs=1M count=$CHUNK_MiB seek=$position conv=notrunc status=none
		echo "Injected block at position ${position}"
	done
}


if [ -n "${verify}" ]; then
	compare_with_original
elif [ -n "${IBLOCKS}${TRUNC_BYTES}" ]; then
	[ -n "${IBLOCKS}" ] && inject_blocks

	if [ -n "${TRUNC_BYTES}" ]; then
		truncate -s "${TRUNC_BYTES}" "${BIGFILE}"
		echo "${BIGFILE} truncated to ${TRUNC_BYTES} bytes"
	fi
else
	checksum_damaged
fi
